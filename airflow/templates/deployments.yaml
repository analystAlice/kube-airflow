apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.airflow.prefix -}}postgres
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: db
    spec:
      containers:
        - name: {{ .Values.airflow.prefix -}}postgres
          image: postgres
          ports:
            - name: {{ .Values.airflow.prefix -}}postgres
              containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "{{ .Values.db.postgres.user -}}"
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.db.postgres.password -}}"
            - name: POSTGRES_DB
              value: "{{ .Values.db.postgres.database -}}"
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.airflow.prefix -}}rabbitmq
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: rabbitmq
    spec:
      restartPolicy: Always
      containers:
        - name: {{ .Values.airflow.prefix -}}rabbitmq
          image: rabbitmq:3-management
          ports:
            - name: {{ .Values.airflow.prefix -}}management
              containerPort: 15672
            - name: {{ .Values.airflow.prefix -}}node
              containerPort: 5672
          env:
            - name: RABBITMQ_DEFAULT_USER
              value: "{{ .Values.db.rabbitmq.user -}}"
            - name: RABBITMQ_DEFAULT_PASS
              value: "{{ .Values.db.rabbitmq.password -}}"
            - name: RABBITMQ_DEFAULT_VHOST
              value: "airflow"
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.airflow.prefix -}}web
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: web
    spec:
      restartPolicy: Always
      containers:
        - name: {{ .Values.airflow.prefix -}}web
          image: {{ .Values.airflow.image }}
          imagePullPolicy: {{ .Values.airflow.image_pull_policy}}
          envFrom:
            - configMapRef:
                name: {{ .Values.airflow.prefix }}airflow-cfg
          ports:
            - name: {{ .Values.airflow.prefix -}}web
              containerPort: 8080
          args: ["webserver"]
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.airflow.prefix -}}flower
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: flower
    spec:
      restartPolicy: Always
      containers:
        - name: {{ .Values.airflow.prefix -}}flower
          image: {{ .Values.airflow.image }}
          imagePullPolicy: {{ .Values.airflow.image_pull_policy}}
          env:
            - name: FLOWER_PORT
              value: "5555"
          envFrom:
            - configMapRef:
                name: {{ .Values.airflow.prefix }}airflow-cfg
          ports:
            - name: {{ .Values.airflow.prefix -}}flower
              containerPort: 5555
          args: ["flower"]
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.airflow.prefix -}}scheduler
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: airflow
        tier: scheduler
    spec:
      restartPolicy: Always
      containers:
        - name: {{ .Values.airflow.prefix -}}scheduler
          image: {{ .Values.airflow.image }}
          imagePullPolicy: {{ .Values.airflow.image_pull_policy}}
          # volumes:
          #     - /localpath/to/dags:/usr/local/airflow/dags
          envFrom:
            - configMapRef:
                name: {{ .Values.airflow.prefix }}airflow-cfg
          args: ["scheduler", "-n", "{{ .Values.airflow.scheduler_num_runs }}"]
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.airflow.prefix -}}worker
spec:
  replicas: {{ .Values.celery.num_workers }}
  template:
    metadata:
      labels:
        app: airflow
        tier: worker
    spec:
      restartPolicy: Always
      containers:
        - name: {{ .Values.airflow.prefix -}}worker
          image: {{ .Values.airflow.image }}
          imagePullPolicy: {{ .Values.airflow.image_pull_policy}}
          # volumes:
          #     - /localpath/to/dags:/usr/local/airflow/dags
          envFrom:
            - configMapRef:
                name: {{ .Values.airflow.prefix }}airflow-cfg
          args: ["worker"]
